{
  "name": "JSON Lab Data Processing",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 2
            }
          ]
        }
      },
      "id": "f1a1b2c3-d4e5-f6g7-h8i9-j0k1l2m3n4o5",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "filePath": "/data/produccion_limpia_final.json",
        "options": {}
      },
      "id": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
      "name": "Read JSON File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Procesar el archivo JSON leído\nconst binaryData = $input.first().binary;\nif (!binaryData || !binaryData.data) {\n  throw new Error('No se pudo leer el archivo JSON');\n}\n\n// Convertir el buffer a string y parsear JSON\nconst jsonString = Buffer.from(binaryData.data, 'base64').toString('utf8');\nconst jsonData = JSON.parse(jsonString);\n\n// Extraer datos del JSON\nconst records = jsonData.data || [];\nconst currentDate = new Date().toISOString().split('T')[0];\n\n// Procesar registros con IDs únicos\nconst processedRecords = records.map((record, index) => ({\n  id: index + 1,\n  fecha: record.fecha,\n  equipo: record.equipo,\n  turno: record.turno,\n  muestras_procesadas: record.muestras_procesadas,\n  rendimiento: record.rendimiento,\n  comentario: record.comentario,\n  tipo_muestra: 'Química',\n  estado: record.rendimiento >= 70 ? 'Aprobado' : 'Rechazado'\n}));\n\n// Obtener valores únicos\nconst turnos_unicos = [...new Set(records.map(r => r.turno))];\nconst equipos_unicos = [...new Set(records.map(r => r.equipo))];\n\nreturn {\n  fecha: currentDate,\n  total_records: processedRecords.length,\n  turnos_unicos: turnos_unicos,\n  equipos_unicos: equipos_unicos,\n  records: processedRecords\n};"
      },
      "id": "j1k2l3m4-n5o6-p7q8-r9s0-t1u2v3w4x5y6",
      "name": "Parse JSON Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Procesar datos del laboratorio químico\nconst items = $input.all();\n\nif (!items || items.length === 0) {\n  return [{ json: { error: 'No hay datos de entrada' } }];\n}\n\nconst item = items[0];\nlet fileData;\n\n// Verificar si tenemos datos binarios o JSON directo\nif (item.binary && item.binary.data) {\n  // Procesar datos binarios\n  const jsonString = Buffer.from(item.binary.data.data, 'base64').toString('utf8');\n  fileData = JSON.parse(jsonString);\n} else if (item.json) {\n  // Procesar JSON directo\n  fileData = item.json;\n} else {\n  return [{ json: { error: 'No se encontraron datos válidos para procesar' } }];\n}\n\n// Extraer metadata y datos\nconst metadata = fileData.metadata || {};\nconst records = fileData.data || [];\n\nconsole.log('Metadata:', metadata);\nconsole.log('Total records found:', records.length);\n\nif (records.length === 0) {\n  return [{ json: { error: 'No hay registros para procesar', total_records: 0 } }];\n}\n\n// Función para limpiar valores NaN\nconst cleanValue = (value, defaultValue = 0) => {\n  const parsed = typeof value === 'number' ? value : parseFloat(value);\n  return isNaN(parsed) ? defaultValue : parsed;\n};\n\nconst cleanIntValue = (value, defaultValue = 0) => {\n  const parsed = typeof value === 'number' ? value : parseInt(value);\n  return isNaN(parsed) ? defaultValue : parsed;\n};\n\n// Procesar registros\nconst processedRecords = records.map((record, index) => {\n  const rendimiento = cleanValue(record.rendimiento, 0);\n  const muestras = cleanIntValue(record.muestras_procesadas, 0);\n  \n  return {\n    json: {\n      type: 'record',\n      record_id: `lab_${Date.now()}_${index + 1}`,\n      fecha: record.fecha || new Date().toISOString().split('T')[0],\n      equipo: record.equipo || 'Desconocido',\n      turno: record.turno || 'No especificado',\n      muestras_procesadas: muestras,\n      rendimiento: rendimiento,\n      comentario: record.comentario || 'Sin comentarios',\n      tipo_muestra: 'Química',\n      estado: rendimiento >= 70 ? 'Aprobado' : 'Rechazado',\n      fecha_procesamiento: new Date().toISOString()\n    }\n  };\n});\n\n// Generar estadísticas\nconst equiposUnicos = [...new Set(records.map(r => r.equipo).filter(Boolean))];\nconst turnosUnicos = [...new Set(records.map(r => r.turno).filter(Boolean))];\nconst rendimientosValidos = records.map(r => cleanValue(r.rendimiento)).filter(r => r > 0);\nconst promedioRendimiento = rendimientosValidos.length > 0 ? \n  rendimientosValidos.reduce((sum, r) => sum + r, 0) / rendimientosValidos.length : 0;\n\nconst totalMuestras = records.reduce((sum, r) => sum + cleanIntValue(r.muestras_procesadas), 0);\n\nconst statistics = {\n  json: {\n    type: 'statistics',\n    fecha_calculo: new Date().toISOString().split('T')[0],\n    total_muestras: totalMuestras,\n    promedio_rendimiento: Math.round(promedioRendimiento * 100) / 100,\n    equipos_activos: equiposUnicos.length,\n    turnos_trabajados: turnosUnicos.length,\n    equipos_unicos: equiposUnicos.join(', '),\n    turnos_unicos: turnosUnicos.join(', '),\n    registros_procesados: processedRecords.length,\n    fecha_procesamiento: new Date().toISOString()\n  }\n};\n\nconsole.log('Processed records:', processedRecords.length);\nconsole.log('Statistics:', statistics);\n\nreturn [statistics, ...processedRecords];"
      },
      "id": "c3d4e5f6-g7h8-i9j0-k1l2-m3n4o5p6q7r8",
      "name": "Process Lab Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "d4e5f6g7-h8i9-j0k1-l2m3-n4o5p6q7r8s9",
              "leftValue": "={{ $json.type }}",
              "rightValue": "statistics",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e5f6g7h8-i9j0-k1l2-m3n4-o5p6q7r8s9t0",
      "name": "Filter Statistics",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1120,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "f6g7h8i9-j0k1-l2m3-n4o5-p6q7r8s9t0u1",
              "leftValue": "={{ $json.type }}",
              "rightValue": "record",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "g7h8i9j0-k1l2-m3n4-o5p6-q7r8s9t0u1v2",
      "name": "Filter Records",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1120,
        400
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO lab_statistics (fecha_calculo, total_muestras, promedio_rendimiento, equipos_activos, turnos_trabajados, equipos_unicos, turnos_unicos, registros_procesados, fecha_procesamiento) VALUES ('{{ $json.fecha_calculo }}', {{ $json.total_muestras }}, {{ $json.promedio_rendimiento }}, {{ $json.equipos_activos }}, {{ $json.turnos_trabajados }}, '{{ $json.equipos_unicos }}', '{{ $json.turnos_unicos }}', {{ $json.registros_procesados }}, '{{ $json.fecha_procesamiento }}')",
        "options": {}
      },

      "id": "h8i9j0k1-l2m3-n4o5-p6q7-r8s9t0u1v2w3",
      "name": "Save Statistics",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1340,
        200
      ],
      "credentials": {
        "postgres": {
          "id": "lab_postgres_credentials",
          "name": "Lab PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO processed_lab_data (record_id, fecha, equipo, turno, muestras_procesadas, rendimiento, comentario, tipo_muestra, estado, fecha_procesamiento) VALUES ('{{ $json.record_id }}', '{{ $json.fecha }}', '{{ $json.equipo }}', '{{ $json.turno }}', {{ $json.muestras_procesadas }}, {{ $json.rendimiento }}, '{{ $json.comentario }}', '{{ $json.tipo_muestra }}', '{{ $json.estado }}', '{{ $json.fecha_procesamiento }}')",
        "options": {}
      },

      "id": "i9j0k1l2-m3n4-o5p6-q7r8-s9t0u1v2w3x4",
      "name": "Save Records",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1340,
        400
      ],
      "credentials": {
        "postgres": {
          "id": "lab_postgres_credentials",
          "name": "Lab PostgreSQL"
        }
      }
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Read JSON File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read JSON File": {
      "main": [
        [
          {
            "node": "Process Lab Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Lab Data": {
      "main": [
        [
          {
            "node": "Filter Statistics",
            "type": "main",
            "index": 0
          },
          {
            "node": "Filter Records",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Statistics": {
      "main": [
        [
          {
            "node": "Save Statistics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Records": {
      "main": [
        [
          {
            "node": "Save Records",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-29T03:35:00.000Z",
  "id": "json-lab-data-processing",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-09-29T03:35:00.000Z",
      "id": "lab-automation",
      "name": "Lab Automation",
      "updatedAt": "2025-09-29T03:35:00.000Z"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-09-29T03:35:00.000Z",
  "versionId": "1",
  "active": true
}